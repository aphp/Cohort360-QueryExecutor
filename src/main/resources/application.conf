app {
    enableCache = false
    jobs {
        threads = 100
    }
    back {
      url: ${?DJANGO_CALLBACK_URL}
      authToken: ${?SJS_TOKEN}
    }
    query {
        useSourcePopulation = true
        useSourcePopulation = ${?USE_SOURCE_POPULATION}
    }
    server {
        port = 8090
        port = ${?SJS_APP_PORT}
    }
    cohortCreationLimit: 20000
    cohortCreationLimit: ${?COHORT_CREATION_LIMIT}
    defaultResolver: solr
    defaultResolver: ${?DEFAULT_RESOLVER}
    defaultCohortCreationService: pg
    defaultCohortCreationService: ${?DEFAULT_COHORT_CREATION_SERVICE}
}

spark {
    master = "local[*]"
    master = ${?SPARK_MASTER}
    driver {
        host = "localhost"
        host = ${?SPARK_DRIVER_HOST}
        port = 4000
        port = ${?SPARK_DRIVER_PORT}
    }
    executor {
        memory = ${?SPARK_EXECUTOR_MEMORY}
    }
}

postgres {
      host = ${?PG_HOST}
      database = ${?PG_DB}
      schema = ${?PG_SCHEMA}
      user = ${?PG_USER}
      port = ${?PG_PORT}
      tables {
          cohortTableName: list_cohort360
          cohortTableName: ${?COHORT_TABLE_NAME}
          cohortTableItemsName: list__entry_cohort360
          cohortTableItemsName: ${?COHORT_TABLE_ITEMS_NAME}
      }
      options {
          providerName: Cohort360
          noteTextColumnName: note__text
          noteTextColumnName: ${?NOTE_TEXT_COLUMN_NAME}
      }
}

solr {
    zk = ${?SOLR_ZK}
    maxTry = 1
    rows = 10000
    commitWithin = 10000
    authFile = "solr_auth.txt"
}

fhir {
    url = ${?FHIR_URL}
    cohortUrl = ${?FHIR_URL_COHORT}
    accessToken = ${?FHIR_ACCESS_TOKEN}
}
